################### C compiler ########################

# Flags for $(CC)
CFLAGS?=-O -g -Wall

################### Java compiler #####################

JAVACFLAGS?=-g

# Java compiler to use
JAVAC=javac

################### JNI interface #####################

## Defaults are set for OpenJDK 8 under Linux/AMD64.
## For other platforms, adjust as required and tell us about it.

# Home location for the JDK.  Only used for setting other variables below. 
JDKHOME=/usr/lib/jvm/java-8-openjdk-amd64

# Current architecture identification string, as intended by the JDK.
# Common values for x86 architectures are "i386" or "amd64". You can find it
# out by looking for the "*" patch component in the following pattern:
# $(JDKHOME)/jre/lib/*/libjava.so
ARCH=amd64

# Where to find the JNI include files (for compiling the OCaml-JNI C stubs)
JNIINCLUDES?=-I$(JDKHOME)/include -I$(JDKHOME)/include/linux

# The library to link with to get the JNI
JNILIBS=-ljvm

# Additional link-time options to pass to $(CC) when linking with $(JNILIBS)
JNILIBOPTS=-L$(JDKHOME)/jre/lib/$(ARCH)/ \
        -L$(JDKHOME)/jre/lib/$(ARCH)/server \
        -Wl,-rpath,$(JDKHOME)/jre/lib/$(ARCH)/ \
        -Wl,-rpath,$(JDKHOME)/jre/lib/$(ARCH)/server \
        -Wl,-rpath,$(JDKHOME)/jre/lib/$(ARCH)/native_threads

# Additional options when compiling the OCaml-JNI C stubs.
# -DJDK122_LINUX_HACK works around a nasty thread-related bug of
#  Sun's JDK 1.2.2 under Linux
#JNISTUBSOPTIONS=-DJDK122_LINUX_HACK
JNISTUBSOPTIONS=
